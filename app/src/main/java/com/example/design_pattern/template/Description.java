package com.example.design_pattern.template;

/**
 * 模板方法模式
 * 某个方法的实现需要多个步骤，其中有些步骤是固定的；而有些步骤并不固定，存在可变性。
 * 为了提高代码的复用性和系统的灵活性，可以使用模板方法模式来应对这类情况。
 * 定义：定义一个操作中的算法框架，而将一些步骤延迟到子类中，使得子类不改变一个算法的结构即可重新定义算法的某些特定步骤。
 * 在模板方法模式中有如下角色：
 * <li>AbstractClass：抽象类，定义了一套算法框架</li>
 * <li>ConcreteClass：具体实现类</li>
 * 模板方法实际就是封装固定的流程，像模板一样，第一步做什么，第二步又做什么，都在抽象类中定义好。
 * 子类可以有不同的算法实现，在算法框架不被修改的前提下实现某些步骤的算法替换。
 */
public class Description {
}
