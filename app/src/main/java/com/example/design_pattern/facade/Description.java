package com.example.design_pattern.facade;

/**
 * 外观模式
 * 外观模式也被称作门面模式，通过一个外观类使得整个系统的结构只有一个统一的高层接口，这样能降低用户的使用成本。
 * 例如本例中，客户端只会使用ZhangWuJi这个类，而不会去使用JingMai和NeiGong或者ZhaoShi类。
 * 定义：要求一个子系统的外部与内部的通信必须通过一个统一的对象进行。此模式提供一个高层的接口，使得子系统更易于使用。
 * 外观模式中有如下角色：
 * <li>Facade：外观类，知道哪些子系统负责处理请求，将客户端的请求代理给适当的子系统对象。</li>
 * <li>Subsystem：子系统类，可以有一个或者多个子系统。实现子系统的功能，
 * 处理外观类指派的任务，注意子系统类不含有外观类的引用</li>
 */
public class Description {
}
