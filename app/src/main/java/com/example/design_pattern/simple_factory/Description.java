package com.example.design_pattern.simple_factory;
/**
 * 简单工厂模式<p></p>
 * 定义：简单工厂模式属于创建型模式，其又被称为静态工厂方法模式，这是由一个工厂对象决定创建出哪一种产品类的实例。
 *
 * 在简单工厂模式中有如下角色。
 * <li>Factory：工厂类，这是简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。
 * 工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li>
 * <li>IProduct：抽象产品类，这是简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
 * <li>Product：具体产品类，这是简单工厂模式的创建目标。</li>
 * 这里我们用生产计算机来距离，假设有一个计算机的代工生产商，它目前已经可以代工生产联想计算机了。
 * 随着业务的扩展，这个代工生产商还要生产惠普和华硕的计算机。
 *
 *
 * 使用简单工厂模式的场景和优缺点：
 * <li>使用场景:<p>
 *  工厂类负责创建的对象比较少。<p>
 * 客户只需知道传入的工厂类的参数，无需关心创建对象的逻辑</li>
 * <li>优点：使用户根据参数获得对应的类实例，避免了直接实例化类，降低了耦合性。</li>
 * <li>缺点：可实例化的类型在编译期间以及被确定。如果增加新类型，则需要修改工厂，这违背了开放封闭原则。
 * 简单工厂需要知道所有的要生成的类型，其当子类过多或者子类层次过多时不适合使用。</li>
 */
public class Description {

}
